- q: Is this particular layout good enough? 
  a: Maybe. But I would recommend polishing it just a little more.
    
- q: How to do a proper CSS transition?
  multiple:
    - "transition: margin-right 2s ease-in-out .5s;"
    - "transition: property name | duration | timing function | delay"
      
    
- q: What is a pattern? What is an anti-pattern? Is dependency injection a pattern?
  a: According to Wikipedia it is a general, reusable solution to a commonly occurring problem within a given context in software design, not something that can be transformed directly into source or machine code. A formalized best practice. An anti-pattern, on the other hand, is common response to a recurring problem that is usually ineffective and risks highly counterproductive. Dependency injection is a pattern, it relieves objects from supplying their own dependencies, how this is done can be specified in separate configuration files, so applications can easily support different configurations.

- q: What is an interface and what are the advantages of making use of them in Java? Why are they recommended for Spring beans?
  a: From Wikipedia, again. An interface is a shared boundary across which two or more separate components of a computer system exchange information. From Oracle docs, interfaces form a contract between the class and the outside world, and this contract is enforced at build time by the compiler. From Stackoverflow, it separates what the caller expects from the actual implementation. Essentially they enable polymorphic behavior. This results in increased testability, because implementations can be swapped easily.
