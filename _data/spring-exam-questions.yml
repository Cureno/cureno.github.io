- q: Is this particular layout good enough? 
  a: Maybe. But I would recommend polishing it just a little more.
    
- q: How to do a proper CSS transition?
  multiple:
    - "transition: margin-right 2s ease-in-out .5s;"
    - "transition: property name | duration | timing function | delay"
      
    
- q: What is a pattern? What is an anti-pattern? Is dependency injection a pattern?
  a: According to Wikipedia it is a general, reusable solution to a commonly occurring problem within a given context in software design, not something that can be transformed directly into source or machine code. A formalized best practice. An anti-pattern, on the other hand, is common response to a recurring problem that is usually ineffective and risks highly counterproductive. Dependency injection is a pattern, it relieves objects from supplying their own dependencies, how this is done can be specified in separate configuration files, so applications can easily support different configurations.

- q: What is an interface and what are the advantages of making use of them in Java? Why are they recommended for Spring beans?
  a: From Wikipedia, again. An interface is a shared boundary across which two or more separate components of a computer system exchange information. From Oracle docs, interfaces form a contract between the class and the outside world, and this contract is enforced at build time by the compiler. From Stackoverflow, it separates what the caller expects from the actual implementation. Essentially they enable polymorphic behavior. This results in increased testability, because implementations can be swapped easily.

- q: What is meant by "application-context"?
  multiple:
    - From Spring docs. The ApplicationContext interface represents the Spring IoC container and is responsible for instantiating, configuring, and assembling the beans. There are several implementations of the interface.
    - ApplicationContext is a sub-interface of BeanFactory, adding easier integration with Spring AOP, Message resouce handling (for use in internationalization), Event publication, Application-layer specific contexts such as the WebApplicationContext.

- q: What is the concept of a "container" and what is its life cycle?
  a: The Spring Container combines business objects (POJOs) with configuration metadata and produces a fully configured system ready for use. It does this in the following steps. 1. Read and parse the Bean definitions (XML, annotations, Java configuration, Groovy DSL), 2. Process the BeanFactoryPostProcessors, 3. Call constructor, instantiate beans, 4. Inject dependencies via setter methods, 5. Inject the required beans defined by the "*Aware" interfaces, 6. Execute postProcessBeforeInitialization of BeanPostProcessor, 7. Call initialization callbacks (InitializingBean's afterPropertiesSet or a custom init-method), 8. Call postProcessor.....
  draft: true

- q: How are you going to create a new instance of an ApplicationContext?
  a: 'ApplicationContext is an interface, for which Spring already supplies implementations, like ClassPathXmlApplicationContext or FileSystemApplicationContext. But it is also possible to create ApplicationContext instances declaratively by using a ContextLoader. This way an ApplicationContext is registered by using the ContextLoaderListener from the org.springframework.web.context package. And the both the context and the ContextLoaderListener are defined in xml files. See: <a href="https://docs.spring.io/spring/docs/5.1.4.BUILD-SNAPSHOT/spring-framework-reference/core.html#context-create">https://docs.spring.io/spring/docs/5.1.4.BUILD-SNAPSHOT/spring-framework-reference/core.html#context-create</a>'
  draft: true